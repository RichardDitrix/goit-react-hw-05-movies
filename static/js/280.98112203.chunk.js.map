{"version":3,"file":"static/js/280.98112203.chunk.js","mappings":"yNAEO,MAAMA,EAAOC,EAAAA,GAAOC,GAAEC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,iKAShBC,EAAQJ,EAAAA,GAAOK,IAAGC,IAAAA,GAAAH,EAAAA,EAAAA,GAAA,yF,wBCJxB,MAAMI,EACL,OADKA,EAEF,UAFEA,EAGD,WAHCA,EAID,WA6DZ,EApCaC,KACX,MAAM,QAAEC,IAAYC,EAAAA,EAAAA,OACd,KAAEC,EAAI,OAAEC,EAAM,MAAEC,GAxBQC,KAC9B,MAAOH,EAAMI,IAAWC,EAAAA,EAAAA,UAAS,KAC1BJ,EAAQK,IAAaD,EAAAA,EAAAA,UAAST,IAC9BM,EAAOK,IAAYF,EAAAA,EAAAA,UAAS,MAiBnC,OAfAG,EAAAA,EAAAA,YAAU,MACRC,iBACEH,EAAUV,GACV,IACE,MAAMI,QAAaU,EAAAA,EAAAA,IAAYP,GAC/BC,EAAQJ,GACRM,EAAUV,EACZ,CAAE,MAAOM,GACPK,EAASL,GACTI,EAAUV,EACZ,CACF,CACAe,EAAW,GACV,CAACR,IAEG,CAAEH,OAAMC,SAAQC,QAAO,EAIEU,CAAiBd,GAEjD,OAAIG,IAAWL,GACNiB,EAAAA,EAAAA,KAACC,EAAAA,EAAO,IAGbb,IAAWL,GACNmB,EAAAA,EAAAA,MAAA,OAAAC,SAAA,CAAK,UAAQd,EAAMe,WAGxBhB,IAAWL,GAAmC,IAAhBI,EAAKkB,QAC9BL,EAAAA,EAAAA,KAAA,OAAAG,SAAK,wCAIZH,EAAAA,EAAAA,KAACzB,EAAI,CAAA4B,SACFhB,EAAKmB,KAAIC,IAAA,IAAC,KAAEC,EAAI,aAAEC,EAAY,UAAEC,EAAS,GAAEpB,GAAIiB,EAAA,OAC9CL,EAAAA,EAAAA,MAAA,MAAAC,SAAA,EACEH,EAAAA,EAAAA,KAACpB,EAAK,CACJ+B,IACEF,EAAY,kCAAAG,OAC0BH,G,8pXAGxCI,IAAG,GAAAD,OAAKJ,MAEVR,EAAAA,EAAAA,KAAA,MAAAG,SAAKK,KACLN,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAG,cAAYO,GAAa,eAVrBpB,EAWJ,KAEF,C,6FClEX,MAAMwB,EAAU,mCAEhBC,IAAAA,SAAeC,QAAU,+BAElB,MAAMC,EAAoBrB,gBACjBmB,IAAAA,IAAU,6BAADH,OAA8BE,KAAYI,KAAKC,QAG3DC,EAAexB,gBACZmB,IAAAA,IAAU,UAADH,OAAWtB,EAAE,aAAAsB,OAAYE,KAAYI,KAGjDG,EAAiBzB,gBACdmB,IAAAA,IAAU,UAADH,OAAWtB,EAAE,qBAAAsB,OAAoBE,KAAYI,KACjEC,QAGQtB,EAAcD,gBACXmB,IAAAA,IAAU,UAADH,OAAWtB,EAAE,qBAAAsB,OAAoBE,KAAYI,KAAK/B,KAG9DmC,EAAe1B,gBACZmB,IAAAA,IAAU,uBAADH,OAAwBW,EAAK,aAAAX,OAAYE,KAC7DI,KAAKC,O","sources":["Pages/Cast/Cast.styled.js","Pages/Cast/Cast.jsx","services/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const List = styled.ul`\n  list-style: none;\n  padding: 0;\n  margin: 0;\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n  gap: 30px 20px;\n`;\n\nexport const Image = styled.img`\n  display: block;\n  max-width: 100%;\n  height: 340px;\n  object-fit: cover;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getCastById } from 'services/api';\nimport { Image, List } from './Cast.styled';\nimport UnknowPerson from 'images/unknown-person.jpg';\nimport { Spinner } from 'components/Spinner/Spinner';\n\nexport const STATUS = {\n  IDLE: 'idle',\n  PENDING: 'pending',\n  RESOLVED: 'resolved',\n  REJECTED: 'rejected',\n};\n\nexport const useFetchCastById = id => {\n  const [cast, setCast] = useState([]);\n  const [status, setStatus] = useState(STATUS.IDLE);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    async function fetchCast() {\n      setStatus(STATUS.PENDING);\n      try {\n        const cast = await getCastById(id);\n        setCast(cast);\n        setStatus(STATUS.RESOLVED);\n      } catch (error) {\n        setError(error);\n        setStatus(STATUS.REJECTED);\n      }\n    }\n    fetchCast();\n  }, [id]);\n\n  return { cast, status, error };\n};\nconst Cast = () => {\n  const { movieId } = useParams();\n  const { cast, status, error } = useFetchCastById(movieId);\n\n  if (status === STATUS.PENDING) {\n    return <Spinner />;\n  }\n\n  if (status === STATUS.REJECTED) {\n    return <div>Error: {error.message}</div>;\n  }\n\n  if (status === STATUS.RESOLVED && cast.length === 0) {\n    return <div>We don't have cast for this movie.</div>;\n  }\n\n  return (\n    <List>\n      {cast.map(({ name, profile_path, character, id }) => (\n        <li key={id}>\n          <Image\n            src={\n              profile_path\n                ? `https://image.tmdb.org/t/p/w500${profile_path}`\n                : UnknowPerson\n            }\n            alt={`${name}`}\n          ></Image>\n          <h3>{name}</h3>\n          <p>Character: {character || 'unknown'}</p>\n        </li>\n      ))}\n    </List>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nconst API_KEY = '80dd5d087ca76f72d259ad6d0e54d71f';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport const getTrendingMovies = async () => {\n  return (await axios.get(`/trending/all/day?api_key=${API_KEY}`)).data.results;\n};\n\nexport const getMovieById = async id => {\n  return (await axios.get(`/movie/${id}?api_key=${API_KEY}`)).data;\n};\n\nexport const getReviewsById = async id => {\n  return (await axios.get(`/movie/${id}/reviews?api_key=${API_KEY}`)).data\n    .results;\n};\n\nexport const getCastById = async id => {\n  return (await axios.get(`/movie/${id}/credits?api_key=${API_KEY}`)).data.cast;\n};\n\nexport const searchMovies = async query => {\n  return (await axios.get(`/search/movie?query=${query}&api_key=${API_KEY}`))\n    .data.results;\n};\n"],"names":["List","styled","ul","_templateObject","_taggedTemplateLiteral","Image","img","_templateObject2","STATUS","Cast","movieId","useParams","cast","status","error","id","setCast","useState","setStatus","setError","useEffect","async","getCastById","fetchCast","useFetchCastById","_jsx","Spinner","_jsxs","children","message","length","map","_ref","name","profile_path","character","src","concat","alt","API_KEY","axios","baseURL","getTrendingMovies","data","results","getMovieById","getReviewsById","searchMovies","query"],"sourceRoot":""}