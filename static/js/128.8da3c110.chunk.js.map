{"version":3,"file":"static/js/128.8da3c110.chunk.js","mappings":"oNAKO,MAAMA,EACL,OADKA,EAEF,UAFEA,EAGD,WAHCA,EAID,WAsDZ,EA5BgBC,KACd,MAAM,QAAEC,IAAYC,EAAAA,EAAAA,OACd,QAAEC,EAAO,OAAEC,EAAM,MAAEC,GAzBCC,KAC1B,MAAOH,EAASI,IAAcC,EAAAA,EAAAA,UAAS,KAChCJ,EAAQK,IAAaD,EAAAA,EAAAA,UAAST,IAC9BM,EAAOK,IAAYF,EAAAA,EAAAA,UAAS,MAiBnC,OAfAG,EAAAA,EAAAA,YAAU,MACRC,iBACEH,EAAUV,GACV,IACE,MAAMI,QAAgBU,EAAAA,EAAAA,IAAeP,GACrCC,EAAWJ,GACXM,EAAUV,EACZ,CAAE,MAAOM,GACPK,EAASL,GACTI,EAAUV,EACZ,CACF,CACAe,EAAc,GACb,CAACR,IAEG,CAAEH,UAASC,SAAQC,QAAO,EAKEU,CAAoBd,GAEvD,OAAIG,IAAWL,GACNiB,EAAAA,EAAAA,KAACC,EAAAA,EAAO,IAGbb,IAAWL,GACNmB,EAAAA,EAAAA,MAAA,OAAAC,SAAA,CAAK,UAAQd,EAAMe,WAGxBhB,IAAWL,GAAsC,IAAnBI,EAAQkB,QACjCL,EAAAA,EAAAA,KAAA,OAAAG,SAAK,+CAIZH,EAAAA,EAAAA,KAAA,MAAAG,SACGhB,EAAQmB,KAAIC,IAAA,IAAC,OAAEC,EAAM,QAAEC,EAAO,GAAEnB,GAAIiB,EAAA,OACnCL,EAAAA,EAAAA,MAAA,MAAAC,SAAA,EACED,EAAAA,EAAAA,MAAA,MAAAC,SAAA,CAAI,WAASK,MACbR,EAAAA,EAAAA,KAAA,KAAAG,SAAIM,MAFGnB,EAGJ,KAEJ,C,6FCzDT,MAAMoB,EAAU,mCAEhBC,IAAAA,SAAeC,QAAU,+BAElB,MAAMC,EAAoBjB,gBACjBe,IAAAA,IAAU,6BAADG,OAA8BJ,KAAYK,KAAKC,QAG3DC,EAAerB,gBACZe,IAAAA,IAAU,UAADG,OAAWxB,EAAE,aAAAwB,OAAYJ,KAAYK,KAGjDlB,EAAiBD,gBACde,IAAAA,IAAU,UAADG,OAAWxB,EAAE,qBAAAwB,OAAoBJ,KAAYK,KACjEC,QAGQE,EAActB,gBACXe,IAAAA,IAAU,UAADG,OAAWxB,EAAE,qBAAAwB,OAAoBJ,KAAYK,KAAKI,KAG9DC,EAAexB,gBACZe,IAAAA,IAAU,uBAADG,OAAwBO,EAAK,aAAAP,OAAYJ,KAC7DK,KAAKC,O","sources":["Pages/Reviews/Reviews.jsx","services/api.js"],"sourcesContent":["import { Spinner } from 'components/Spinner';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getReviewsById } from 'services/api';\n\nexport const STATUS = {\n  IDLE: 'idle',\n  PENDING: 'pending',\n  RESOLVED: 'resolved',\n  REJECTED: 'rejected',\n};\n\nconst useFetchReviewsById = id => {\n  const [reviews, setReviews] = useState([]);\n  const [status, setStatus] = useState(STATUS.IDLE);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    async function fetchReviews() {\n      setStatus(STATUS.PENDING);\n      try {\n        const reviews = await getReviewsById(id);\n        setReviews(reviews);\n        setStatus(STATUS.RESOLVED);\n      } catch (error) {\n        setError(error);\n        setStatus(STATUS.REJECTED);\n      }\n    }\n    fetchReviews();\n  }, [id]);\n\n  return { reviews, status, error };\n};\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const { reviews, status, error } = useFetchReviewsById(movieId);\n\n  if (status === STATUS.PENDING) {\n    return <Spinner />;\n  }\n\n  if (status === STATUS.REJECTED) {\n    return <div>Error: {error.message}</div>;\n  }\n\n  if (status === STATUS.RESOLVED && reviews.length === 0) {\n    return <div>We don't have any reviews for this movie.</div>;\n  }\n\n  return (\n    <ul>\n      {reviews.map(({ author, content, id }) => (\n        <li key={id}>\n          <h3>Author: {author}</h3>\n          <p>{content}</p>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\nconst API_KEY = '80dd5d087ca76f72d259ad6d0e54d71f';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport const getTrendingMovies = async () => {\n  return (await axios.get(`/trending/all/day?api_key=${API_KEY}`)).data.results;\n};\n\nexport const getMovieById = async id => {\n  return (await axios.get(`/movie/${id}?api_key=${API_KEY}`)).data;\n};\n\nexport const getReviewsById = async id => {\n  return (await axios.get(`/movie/${id}/reviews?api_key=${API_KEY}`)).data\n    .results;\n};\n\nexport const getCastById = async id => {\n  return (await axios.get(`/movie/${id}/credits?api_key=${API_KEY}`)).data.cast;\n};\n\nexport const searchMovies = async query => {\n  return (await axios.get(`/search/movie?query=${query}&api_key=${API_KEY}`))\n    .data.results;\n};\n"],"names":["STATUS","Reviews","movieId","useParams","reviews","status","error","id","setReviews","useState","setStatus","setError","useEffect","async","getReviewsById","fetchReviews","useFetchReviewsById","_jsx","Spinner","_jsxs","children","message","length","map","_ref","author","content","API_KEY","axios","baseURL","getTrendingMovies","concat","data","results","getMovieById","getCastById","cast","searchMovies","query"],"sourceRoot":""}